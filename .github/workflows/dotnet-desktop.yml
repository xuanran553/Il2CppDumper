#此工作流使用未经GitHub认证的操作。
#它们由第三方提供，并由
#单独的服务条款、隐私政策和支持
#文档。

#此工作流将构建、测试、签名和打包WPF或Windows窗体桌面应用程序
#构建在. NET核心之上。
#要了解如何将现有应用程序迁移到. NET Core，
#参考https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
#配置此工作流：
#
#1。配置环境变量
#GitHub为每个工作流运行设置默认环境变量。
#替换下面“env”部分中与项目相关的变量。
#
# 2. Signing
#在Windows应用程序中生成签名证书
#打包项目或向项目添加现有签名证书。
#接下来，使用PowerShell使用Base64编码对. pfx文件进行编码
#通过运行以下Powershell脚本生成输出字符串：
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
#[System.Convert]：：ToBase64String（$pfx_Cert）|Out-文件'SigningCertificate_Encoded.txt'
#
#打开输出文件SigningCertificate_Encoded.txt，并复制
#弦在里面。然后，将字符串作为GitHub secret添加到回购
#并将其命名为“Base64_Encoded_Pfx”
#有关如何为
#此工作流程，请参阅https://github.com/microsoft/github-actions-for-desktop-apps#签名
#
#最后，将签名证书密码作为秘密添加到回购中，并将其命名为“Pfx_Key”。
#请参阅下面的“构建Windows应用程序打包项目”，了解如何使用这个秘密。
#
#有关GitHub操作的更多信息，请参阅https://GitHub.com/features/Actions
#要获得完整的CI/CD示例，以便开始使用桌面应用程序的GitHub Action工作流，
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: your-solution-name                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
